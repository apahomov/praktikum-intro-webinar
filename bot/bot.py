import logging
import os
import random
from urllib.parse import urljoin

import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import DICE_SLOT_MACHINE
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

BASE_API_URL = os.getenv('API_BASE_URL')


def start(update: Update, context: CallbackContext) -> None:
    update.effective_message.reply_text('''
–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∏—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º –Ω–∞ —Å–≤–æ–π –≤–∫—É—Å üé•
–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏ /search + –∑–∞–ø—Ä–æ—Å
    ''')
    if animation_id := os.getenv('START_ANIMATION_ID'):
        update.effective_message.reply_animation(animation_id)


def search(update: Update, context: CallbackContext) -> None:
    query = update.effective_message.text.replace('/search', '').strip()
    if not query:
        update.effective_message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
        return

    url = urljoin(BASE_API_URL, 'movies')
    response = requests.get(
        url,
        params={'search': query, 'limit': 4, 'page': 1},
        headers={'Content-Type': 'application/json'}
    )
    if not response.ok:
        logger.log(level=logging.ERROR, msg=f'{url} - {query} - {response.status_code} - {response.text}')
        update.effective_message.reply_text('–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
        return

    movies = response.json()
    if not movies:
        update.effective_message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å :( –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∏—Å–∫–∞—Ç—å –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å')
        return

    buttons = [
        [
            InlineKeyboardButton(
                text=f'{movie["title"]} IMDB: {movie["imdb_rating"]}',
                callback_data=f'show_movie_{movie["id"]}'
            )
        ] for movie in movies
    ]
    if len(buttons) > 1:
        buttons.append(
            [
                InlineKeyboardButton(text='–í–æ–ª—è —Å–ª—É—á–∞—è!', callback_data=f'random_{query}')
            ]
        )
    update.effective_message.reply_text(text='–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ üëá', reply_markup=InlineKeyboardMarkup(buttons))


def show_movie(update: Update, context: CallbackContext) -> None:
    movie_id = update.callback_query.data.replace('show_movie_', '')

    url = urljoin(urljoin(BASE_API_URL, 'movies/'), movie_id)
    response = requests.get(
        url,
        headers={'Content-Type': 'application/json'}
    )
    if not response.ok:
        logger.log(level=logging.ERROR, msg=f'{url} - {response.status_code} - {response.text}')
        update.effective_message.reply_text('–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
        return
    movie = response.json()
    message = '''
–ù–∞–∑–≤–∞–Ω–∏–µ: {title} \n
–û–ø–∏—Å–∞–Ω–∏–µ: {description} \n
IMDB rating: {imdb_rating} \n
–ê–∫—Ç–µ—Ä—ã: {actors} \n
–ñ–∞–Ω—Ä—ã: {genre} \n
–°—Ü–µ–Ω–∞—Ä–∏—Å—Ç—ã: {writers} \n
–†–µ–∂–∏—Å–µ—Ä: {director} \n
    '''.format(
        **movie
    )
    update.effective_message.reply_text(message)


def random_dice(update: Update, context: CallbackContext) -> None:
    update.effective_message.reply_dice(emoji=DICE_SLOT_MACHINE)
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ - –í–æ–ª—è —Å–ª—É—á–∞—è
    movies = update.effective_message.reply_markup.inline_keyboard[:-1]
    chosen_movie = random.choice(movies)
    update.effective_message.reply_text(
        '–Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å  üëá',
        reply_markup=InlineKeyboardMarkup([chosen_movie]))


def oops(update: Update, context: CallbackContext) -> None:
    update.effective_message.reply_text('''
    –Ø –Ω–µ —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã :( –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π /search –∑–∞–ø—Ä–æ—Å.
    ''')


def main():
    updater = Updater(os.getenv('TELEGRAM_API_TOKEN'))

    dispatcher = updater.dispatcher

    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CommandHandler('help', start))
    dispatcher.add_handler(CommandHandler('search', search))

    # callbacks
    dispatcher.add_handler(CallbackQueryHandler(show_movie, pattern=r'^show_movie_\w+$'))
    dispatcher.add_handler(CallbackQueryHandler(random_dice, pattern=r'^random_\w+$'))

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.all & ~Filters.command, oops))

    # –°—Ç–∞—Ä—Ç—É–µ–º –ø–æ–ª–ª–∏–Ω–≥, –µ—â–µ –º–µ—Ç–æ–¥ - –≤–µ–±—Ö—É–∫
    updater.start_polling()

    # –ñ–¥–µ–º –¥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
    updater.idle()


if __name__ == '__main__':
    main()
